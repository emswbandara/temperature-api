/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.temperature.api;

import com.temperature.api.model.Error;
import java.util.List;
import com.temperature.api.model.TemperatureReading;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-21T20:23:20.340589+05:30[Asia/Colombo]")

@Validated
@Api(value = "temperature", description = "the temperature API")
public interface TemperatureApi {

    default TemperatureApiDelegate getDelegate() {
        return new TemperatureApiDelegate() {};
    }

    /**
     * POST /temperature/bulk-save : Bulk Save temperature
     * Bulk Save temperature
     *
     * @param temperatureReading  (required)
     * @return Accepted (status code 202)
     *         or Bad Request (status code 400)
     *         or Unexpected Error (status code 500)
     */
    @ApiOperation(value = "Bulk Save temperature", nickname = "bulkSaveTemperature", notes = "Bulk Save temperature", tags={ "save", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Accepted"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected Error", response = Error.class) })
    @RequestMapping(value = "/temperature/bulk-save",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> bulkSaveTemperature(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TemperatureReading> temperatureReading) {
        return getDelegate().bulkSaveTemperature(temperatureReading);
    }


    /**
     * GET /temperature/fetch : Fetch Temperature Data
     *
     * @param start The start time for fetching temperature readings (required)
     * @param end The end time for fetching temperature readings (required)
     * @return Successful Response (status code 200)
     *         or Data not found (status code 404)
     */
    @ApiOperation(value = "Fetch Temperature Data", nickname = "fetchTemperature", notes = "", response = TemperatureReading.class, responseContainer = "List", tags={ "fetch", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response", response = TemperatureReading.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Data not found") })
    @RequestMapping(value = "/temperature/fetch",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TemperatureReading>> fetchTemperature(@NotNull @ApiParam(value = "The start time for fetching temperature readings", required = true) @Valid @RequestParam(value = "start", required = true) String start,@NotNull @ApiParam(value = "The end time for fetching temperature readings", required = true) @Valid @RequestParam(value = "end", required = true) String end) {
        return getDelegate().fetchTemperature(start, end);
    }


    /**
     * POST /temperature/save : Save temperature
     * Save temperature
     *
     * @param temperatureReading  (required)
     * @return Successful Response (status code 200)
     *         or Bad Request (status code 400)
     *         or Unexpected Error (status code 500)
     */
    @ApiOperation(value = "Save temperature", nickname = "saveTemperature", notes = "Save temperature", tags={ "save", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 500, message = "Unexpected Error", response = Error.class) })
    @RequestMapping(value = "/temperature/save",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> saveTemperature(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TemperatureReading temperatureReading) {
        return getDelegate().saveTemperature(temperatureReading);
    }

}
